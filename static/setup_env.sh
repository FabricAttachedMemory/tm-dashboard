#!/bin/bash
#  This script creates couple config files for "webpackg" (and npm) to be able
# to compile React application into a Browser readable Javascript code.
# Thus, we need two config files: webpack.config.js for "webpack" tool; and
# .babelrc for the "Babel" compiler used in this project to compile React's JSX
# syntax.
#
# Creating this config files will let you run the following to Bundle\Compile
# React syntax\code:
#   npm run dev  -- to compile everything
#   webpack path/to/react.js  --- to compile One script. Usefull to check for errors
#                                 of just one file.
# NOTE: there is a ./compile script in this project that you can run to compile all.
#
# Run this script, if you are missing "webpack.config.js" and\or ".babelrc" files
# in THIS project. Or if you just want to make sure...
#
# References I used:
# https://webpack.github.io/docs/tutorials/getting-started/
# https://scotch.io/tutorials/setup-a-react-environment-using-webpack-and-babel

set -e

WEBPACK_CFG=./webpack.config.js

if [ -f $WEBPACK_CFG ]; then
    echo " -- Webpack config at $WEBPACK_CFG already exist! Overriding... --"
fi

BUILD_DIR="build/"
APP_DIR="src/"

# webpack.config.js contents to be created. It tells "npm run" command where
# to "bundle\build" the whole project to (BUILD_DIR variable); where the whole
# React source code at (APP_DIR variable) - usually it is at src/; it also
# have to know the file "extensions" to compil: js, jsx, css.... - this part feels
# ridiculous.. why would npm figure out the extensions itself is beyond my understanding,
# so lets just try to belive that "there is a reason for that". Whatever.
echo """//GENERATED BY setup_env.sh script!

var webpack = require('webpack');
var path = require('path');

var BUILD_DIR = path.resolve(__dirname, 'compiled/');
var APP_DIR = path.resolve(__dirname, 'src/');

var config = {
  entry: APP_DIR + '/main.jsx',
  resolve: {
    modulesDirectories: ['node_modules', 'src'],
    extensions: ['', '.js', '.jsx', '.json', '.scss', '.css', '.svg']
  },
  output: {
    path: BUILD_DIR,
    filename: 'bundle.js'
  },
    module : {
        loaders : [
      {
        test: /\.(js|jsx)?$/,
        exclude: /node_modules/,
        loader: 'babel-loader'
      },
          {
            test: /\.css?$/,
            loader: 'style!css?modules!sass'
          },
          { test: /\.(otf|png|woff|woff2|eot|ttf|svg)$/,
            loader: 'url-loader?limit=100000'
          }
        ]
    }
};
module.exports = config;""" > webpack.config.js

# Another bloody config for the Babel compiler. My understanding is that this
# basically tells Babel which compiler to use - thanks to the UI community\developers
# for the diversity. So, if "es2015" is listed, make sure you alos installed it
# in your project (or globally) with npm: "npm i es2015" (or something like that).
echo """{
  "presets" : [\"es2015\", \"react\"]
}""" > .babelrc
